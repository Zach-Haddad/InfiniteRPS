{"version":3,"sources":["webpack:///webpack/bootstrap 11ac5a8556bc4b8b513c","webpack:///./lib/infinite_rps.js","webpack:///./lib/game.js","webpack:///./lib/unit.js","webpack:///./lib/player.js","webpack:///./lib/enemy.js","webpack:///./lib/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAM;;AAEN;;;AAGA;AACA;AACA;;AAEA,EAAC;;;;;;;AC1BD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAK;AACL;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,iCAAgC;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACnKA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,UAAU;AAChD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC1BA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAsC,KAAK;AAC3C;;AAEA;;AAEA;;;;;;;ACjBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 11ac5a8556bc4b8b513c","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const canvasEl = document.getElementById(\"mainCanvas\");\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n\n  const ctx = canvasEl.getContext(\"2d\");\n  const game = new Game();\n\n  new GameView(game, ctx).start();\n\n  // const rock = new Image();\n  // rock.src = \"assets/images/rock.png\";\n  //\n  // rock.addEventListener(\"load\", function() {\n  // }, false);\n\n  // need preloader\n\n\n  // const view = new GameView(game, ctx);\n  // window.view = view;\n  // window.view.bindKeys();\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/infinite_rps.js\n// module id = 0\n// module chunks = 0","const Unit = require(\"./unit\");\nconst Player = require(\"./player\");\nconst Enemy = require(\"./enemy\");\n\nclass Game {\n  constructor() {\n    this.level = 1;\n    this.score = 0;\n    this.enemies = [];\n    this.activeEnemies = [];\n    this.player = new Player();\n    this.levelCompleted = false;\n  }\n\n  populateEnemies(level) {\n    let numEnemies = Math.floor(3 + level*1.1);\n    this.enemies = new Array();\n    for (var i = 0; i < numEnemies; i++) {\n      let newEnem = new Enemy();\n      this.enemies.push(newEnem);\n    }\n    this.spawnEnemies();\n  }\n\n  activateEnemy(){\n      let nextEnemy = this.enemies.shift();\n      this.activeEnemies.push(nextEnemy);\n  }\n\n  enemySpawnInterval(level) {\n    const max = 1500;\n    const min = (950 - (level * 30));\n    return Math.random() * (max - min) + min;\n  }\n  // may want to fine tune this in the future\n  // now just sets interval in general for a level, need to be able to\n  // set individual intervals within level eventually\n\n  spawnEnemies(){\n    let numEnemies = this.enemies.length;\n    const i = setInterval(() => {\n      this.activateEnemy();\n\n      numEnemies -= 1;\n      if(numEnemies === 0) {\n        clearInterval(i);\n      }\n\n    }, this.enemySpawnInterval(this.level));\n  }\n\n  moveObjects(delta){\n    this.activeEnemies.forEach((enemy) => {\n      enemy.move(delta);\n    });\n  }\n\n  draw(ctx){\n    ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    this.player.draw(ctx);\n\n    this.activeEnemies.forEach((enemy) => {\n      enemy.draw(ctx);\n    });\n  }\n\n  removeEnemy(){\n    this.activeEnemies.shift();\n  }\n\n  checkCollisions(){\n    if (this.activeEnemies.length){\n      let nextEnemy = this.activeEnemies[0];\n      if (this.player.x > (nextEnemy.x - 75)){\n        this.handleScore(nextEnemy);\n        this.handleHealth(nextEnemy);\n        this.removeEnemy();\n      }\n    }\n\n    if(!this.activeEnemies.length && !this.enemies.length){\n      this.levelCompleted = true;\n    }\n  }\n\n  handleScore(enemy){\n    if (this.rpsLogic(this.player.type, enemy.type) === \"win\"){\n      this.score += 50;\n    }\n    console.log(this.score);\n  }\n\n  handleHealth(enemy){\n    switch (this.rpsLogic(this.player.type, enemy.type)) {\n      case \"draw\":\n        this.player.health -= 0.5;\n        break;\n      case \"loss\":\n        this.player.health -= 1;\n        break;\n      default:\n        return;\n    }\n\n    console.log(this.player.health);\n    console.log(this.enemies);\n    console.log(this.activeEnemies);\n    console.log(this.level);\n  }\n\n  rpsLogic(playerType, enemyType){\n    const types = Unit.TYPES;\n    const playerIdx = types.indexOf(playerType);\n    const enemyIdx = types.indexOf(enemyType);\n\n    if (playerIdx === enemyIdx) {\n      return \"draw\";\n    }\n\n    if (playerIdx === 2 && enemyIdx === 0){\n      return \"loss\";\n    }\n\n    if (enemyIdx === 2 && playerIdx === 0){\n      return \"win\";\n    }\n\n    if (playerIdx > enemyIdx){\n      return \"win\";\n    } else {\n      return \"loss\";\n    }\n  }\n\n  step(delta){\n    this.moveObjects();\n    this.checkCollisions();\n    this.levelReset();\n  }\n\n  pause(){\n\n  }\n\n  gameOver(){\n    if (this.player.health <= 0){\n      return;\n      // render gameover screen; document.getElementById('game-over');\n    }\n  }\n\n  levelReset(){\n    if (this.levelCompleted){\n      this.levelCompleted = false;\n      this.level ++;\n      this.populateEnemies(this.level);\n    }\n  }\n}\n\nGame.DIM_X = 800;\nGame.DIM_Y = 500;\n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 1\n// module chunks = 0","class Unit {\n  constructor() {\n    this.x = 600;\n    this.y = 200;\n    this.type = this.type = Unit.TYPES[Math.floor(Math.random() * 3)];\n    this.img = new Image();\n    this.img.src = `./assets/images/${this.type}.png`;\n  }\n\n  draw(ctx) {\n      ctx.drawImage(this.img, this.x, 280);\n  }\n\n  move(){\n    this.x -= 3;\n  }\n  // manipulate speed here ^^^\n\n}\n\nUnit.TYPES = [\n    \"rock\",\n    \"paper\",\n    \"scissors\"\n];\n\nmodule.exports = Unit;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/unit.js\n// module id = 2\n// module chunks = 0","const Unit = require(\"./unit\");\n\nclass Player extends Unit {\n  constructor() {\n    super();\n    this.x = 100;\n    this.health = 3;\n  }\n\n  setType(type) {\n    this.type = type;\n    this.img = new Image();\n    this.img.src = `./assets/images/${type}.png`;\n  }\n\n}\n\nmodule.exports = Player;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/player.js\n// module id = 3\n// module chunks = 0","const Unit = require(\"./unit\");\n\nclass Enemy extends Unit {\n  constructor() {\n    super();\n  }\n\n  // handle anti-enemy logic here in the future\n  // shape shifters\n\n}\n\nmodule.exports = Enemy;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/enemy.js\n// module id = 4\n// module chunks = 0","class GameView {\n  constructor(game, ctx) {\n    this.ctx = ctx;\n    this.game = game;\n    this.player = this.game.player;\n  }\n\n  bindKeys() {\n    const player = this.player;\n    const ctx = this.ctx;\n\n    addEventListener(\"keydown\", function(e) {\n      switch (e.keyCode) {\n        case 90:\n        case 37:\n          player.setType('rock');\n          break;\n        case 88:\n        case 40:\n          player.setType('paper');\n          break;\n        case 67:\n        case 39:\n          player.setType('scissors');\n          break;\n        default:\n          break;\n      }\n    }, false);\n  }\n\n  // consider modifying switch statement above to only allow moves if game NOT over\n  // save draw for game.draw!\n\n  animate(time){\n    const timeDelta = time - this.lastTime;\n    this.game.step(timeDelta);\n    this.game.draw(this.ctx);\n    this.lastTime = time;\n\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n\n  start(){\n    this.bindKeys();\n    this.lastTime = 0;\n    this.game.populateEnemies(this.game.level);\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\nmodule.exports = GameView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game_view.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}